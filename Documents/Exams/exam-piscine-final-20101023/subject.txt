Details administratifs:

- Aucune forme de communication n'est permise.

	- Vous devez avoir votre carte d'etudiant. Vous devez la poser face visible
	  sur votre table

	- Ceci est un examen, il est interdit de discuter, ecouter de la musique,
	  faire du bruit, ou de produire toute autres nuisances pouvant deranger les
	  autres etudiants ou perturber le bon deroulement de l'examen

	- Vos telephones portables doivent etre eteints.
	
	- Il faudra utiliser le sous-repertoire "rendu" a la racine du compte,
	  il contiendra les repertoires aux noms demandes pour chaque
	  exercice.

	- Chaque exercice doit etre realise dans le repertoire correspondant au 
	  nom indique dans l'en-tete de chaque exercice.

	- Le repertoire "rendu", doit contenir un fichier nomme "auteur"
	  comprenant :
		le login (ex: jog) suivi d'un '\n'.
	  ce qui doit donner:

	  jog@neutron> cat -e ~/rendu/auteur
	  jog$

	- C'est un programme qui s'occupe du ramassage, respectez les noms,
	  les chemins, les fichiers et les repertoires ...

	- LES DROITS DE VOS FICHIERS N'ONT AUCUNE IMPORTANCE, VOUS N'AVEZ DONC
	  PAS BESOIN DE LES CHANGER (SAUF SI ON VOUS LE DEMANDE DANS LE SUJET).
	
	- En cas de probleme technique avec le sujet, on ne doit s'adresser qu'au
	  surveillant uniquement.

	- Tout materiel non explicitement autorise est strictement interdit.

	- LES EXERCICES DOIVENT ETRE REALISES DANS L'ORDRE, la correction 
	  de l'examen s'arretera des qu'un exercice sera considere comme faux.

	- Toute sortie est definitive.


Le Code :

	- Des fonctions utiles sont parfois donnees dans le repertoire
	  ~/sujet/misc

	- Le releve du code est automatise, un programme testera le bon
	  fonctionnement des exercices.

	- Les fonctions autorisees sont indiquees dans l'en-tete de chaque 
	  exercice. Vous pouvez recoder toutes les fonctions a votre guise.

	- Toute fonction non autorisee explicitement est interdite.

	- Vous avez le droit a des feuilles blanches et un stylo.

	- Les exercices dit "subsidiaires" sont des exercices qui donnent des
	  points si vous avez fait les exercices qui les precedent.

	- Les exercices dit "bonus" sont des exercices qui donnent des points 
	  supplementaires meme si vous ne faites pas les exercices qui les 
	  precedent.

	- Pour toute question apres l'examen, creez un ticket sur l'intra-bocal
	  (http://intra-bocal.epitech.net), ou envoyez un mail a
	  contact@staff.epita.fr


 ----------******------------*****------------******------------*****----------


------------------- ******** -------------------

Exercice 1 : aff_z
_______________________
Nom de l'executable     :       aff_z
Nom du repertoire       :       ex_1
temps de realisation    :       30 minutes.
Fonction autorisee      :       my_putchar

        Ecrire un programme qui prend en parametre une chaine de caracteres
        et qui affiche sur la sortie standard le premier caractere 'z'
        rencontre suivi de '\n'. Si aucun 'z' n'est rencontre dans la chaine,
        le programme affiche 'z' suivi '\n'. Si il n'y a pas de parametre
        alors le programme affiche 'z' suivie '\n'.


exemple 1:
(jog@almarita)./aff_z "abc"
z
(jog@almarita)

exemple 2:
(jog@almarita) ./aff_z "  Chiche A POal " | cat -e
z$
(jog@almarita)

exemple 3:
(jog@almarita) ./aff_z " AkjhZ zLKIJz , 23y"
z
(jog@almarita)

exemple 4:
(jog@almarita) ./aff_z | cat -e
z$
(jog@almarita)


------------------- ******** -------------------

Exercice 2 : maff_alpha
------------------------
Nom du fichier C        :       maff_alpha.c
Nom du repertoire       :       ex_2
Temps de realisation    :       20 minutes.
Fonctions autorisee     :       my_putchar
Compilation		:	cc -o maff_alpha maff_alpha.c


        Ecrire un programme qui affiche l'alphabet une lettre sur 2
        en minuscule, une lettre sur 2 en majuscule. (voir exemple)
        
        Le fichier maff_alpha.c contiendra le main et tout ce qu'il faut
        (notament la fonction my_putchar)

	ATTENTION le programme sera compile comme :
	cc -o maff_alpha maff_alpha.c


exemple :
(jog@almarita)./maff_alpha
aBcDeFgHiJkLmNoPqRsTuVwXyZ
(jog@almarita)./maff_alpha | cat -e
aBcDeFgHiJkLmNoPqRsTuVwXyZ$
(jog@almarita)


------------------- ******** -------------------

Exercice 3  : rotone
________________________
Nom de l'executable     :       rotone
Nom du repertoire       :       ex_3
Temps de realisation    :       15 minutes
Language		:	C
Fonction autorisee      :       my_putchar, my_putnbr, my_putstr, write
Makefile		:	oui


         Ecrire un programme qui prend en parametre une chaine de caracteres
         et qui affiche cette chaine en remplacant chaque caractere
         alphabetique par le caractere suivant dans l'ordre alphabetique.

	 
	 
	 'z' devient 'a' et 'Z' devient 'A'.

         Les majuscules restent des majuscules et les minuscules restent des
         minuscules.

         L'affichage se termine toujours par un '\n'.

         Si aucun parametre n'est transmis, le programme affiche '\n'.



exemple 1:
> ./rotone "abc"
bcd
>

exemple 2:
> ./rotone "Eliminez le bingalow 505" | cat -e
Fmjnjofa mf cjohbmpx 505$
>

exemple 3:
> ./rotone " AkjhZ zLKIJz , 23y " | cat -e
 BlkiA aMLJKa , 23z $
>

exemple 3:
> ./rotone | cat -e
$
>


------------------- ******** -------------------

Exercice 4 : hidenp
__________________________

Nom de l'executable  :          hidenp
Nom du repertoire    :          ex_4
temps de realisation :          15 minutes
Fonctions autorisees :          write
Makefile             :          oui


        Ecrire un programme qui prend en parametres deux chaines de
        caracteres et qui affiche:
	1 suivi de '\n',
	si la chaine du premier parametre est cachee dans la deuxieme chaine.
	Sinon il affichera:
	0 suivi de '\n'.
	Soit s1 et s2 des chaine de caracteres.
        On dit que la chaine s1 est cachee dans la chaine s2 si on peut
        trouver chaque caractere de s1 dans s2 et ce dans le meme ordre que
        dans s1.

        Ainsi:
		"fgex.;" est cachee dans "tyf34gdgf;'ektufjhgdgex.;.;rtjynur6"
		"abc" est cachee dans "2altrb53c.sse"
		"abc"  n'est pas cachee dans "btarc"

	Si il n'y a pas deux parametres, le programme affiche '\n'.


exemple 1:
(jog@almarita)./hidenp padinton "paqefwtdjetyiytjneytjoeyjnejeyj" | cat -e
1$
(jog@almarita)


exemple 2:
(jog@almarita)./hidenp ddf6vewg64f gtwthgdwthdwfteewhrtag6h4ffdhsd | cat -e
0$
(jog@almarita)


exemple 3:
(jog@almarita)./hidenp "rien" "cette phrase ne cache rien" | cat -e
1$
(jog@almarita)


exemple 4:
(jog@almarita)./hidenp | cat -e
$
(jog@almarita)


------------------- ******** -------------------

Exercice 5 : epur_str
_______________________
Nom de l'executable	:	epur_str
repertoire		:	ex_5
executable		:	epur_str
temps de realisation	:       30 minutes.
Fonction autorisee	:       my_putchar, my_putnbr, my_putstr.
Makefile		:	oui  


        Ecrire un programme qui prend en parametre une chaine de caracteres
        et qui affiche les mots separes par un seul espace.
	Le dernier mot sera suivi d'un '\n' (meme s'il y en a aucun).
	Il ne devra y avoir d'espace ni avant le premier n'y apres le dernier
	mot.
	On appel "mot" une chaine de caractere separee par soit des espaces et tabulations, 
	soit le debut de la chaine ou la fin de la chaine.

        Si aucun parametre n'est transmis, epur_str affiche '\n'.


Exemples:

(jog@almarita)./epur_str "abc cba abc cab cba" | cat -e
abc cba abc cab cba$
(jog@almarita)

(jog@almarita)./epur_str "   Remus   et   Romulus    sont  les deux mamelles de Rome  " | cat -e
Remus et Romulus sont les deux mamelles de Rome$
(jog@almarita)

(jog@almarita)./epur_str | cat -e
$
(jog@almarita)


------------------- ******** -------------------

Exercice 6 : ord_alphlong
------------------------
Nom de l'executable     :       ord_alphlong
Nom du repertoire       :       ex_6
temps de realisation    :       20 minutes.
Fonction autorisee      :       my_putchar, my_putnbr, my_putstr, malloc, free, write
Makefile		: 	oui



        Ecrire un programme qui prend en parametre une chaine de caracteres
        et qui affiche les mots de cette chaine par ordre de longueur puis
        dans l'ordre ascii. Les majuscules et minuscules sont identiques dans
        l'ordre alphabetique (bien regarder les exemples). En cas d'egalite
        alphabetique (ex aA et Aa) les mots doivent rester dans l'ordre
        ou ils etaient dans la chaine d'origine (dernier exemple).

        Si aucun parametre n'est transmis, ce programme renvoie '\n'.

	Dans les chaines, il n'y aura que des espaces, des tabulations
	et des caracteres alphanumeriques.

        Vous n'afficherez qu'un espace entre les mots. Aucun
        avant le premier ni apres le dernier de chaque ligne.


exemple 1:
(jog@almarita)./ord_alphlong "De son baton il frappa la pierre et l eau jaillit" | cat -e
l$
De et il la$
eau son$
baton$
frappa pierre$
jaillit$
(jog@almarita)

exemple 2:
(jog@almarita)./ord_alphlong "A a b B cc ca cd" | cat -e
A a b B$
ca cc cd$
(jog@almarita)


------------------- ******** -------------------

Exercice 7 : count_island
------------------------
Nom de l'executable     :       count_island
Nom du repertoire       :       ex_7
temps de realisation    :       30 minutes.
Fonction autorisee      :       read, write, open, close, malloc, free
Makefile		: 	oui



        Le programme prend en parametre un fichier contenant une serie de
	lignes de longueurs egales contenant soit le caractere '.' soit le
	caractere 'X'. Ces lignes forment un rectangle de '.' comportant des
	ilots de 'X'.
	Une ligne est une suite de caracteres '.' et de caracteres 'X' qui se
	termine par un '\n'. Les lignes font toutes la meme taille. La taille
	maximum d'une ligne est 1024 caracteres.
	Une colonne de caracteres est formee par l'ensemble des caracteres dans
	un fichier qui sont separes par le meme nombre de caracteres du debut
	de leur ligne respective.
	On dit que deux caracteres se touchent s'ils sont :
		- soit sur la meme ligne et contigus.
		- soit sur la meme colone et sur des lignes contigues.
	Un ilot de 'X' est forme par l'ensemble des caracteres qui se touchent.
	Le programme doit parcourir le fichier ligne par ligne et l'afficher a
	l'ecran en remplacant tous les 'X' des ilots par leur numero
	d'apparition dans le fichier. Le programme devra effectue ce traitement
	en commancant par le debut du fichier.
	Il ne peut pas y avoir deux resultats differents pour un meme fichier.
	Si le fichier est vide, qu'une erreur s'est produite ou que aucun
	fichier n'est passe en parametre, le programme ecrit simplement le
	caractere '\n' sur sa sortie standard.
	Le fichier comporte au maximum 10 ilots.
	Vous trouverez dans le repertoire misc des exemples de fichier.

	Exemple 1:
	Voici le contenu du fichier "toto".

	.................XXXXXXXX..........................................
	....................XXXXXXXXX.......XXXXXXXX.......................
	.................XXXXXXXX..............XXX...XXXXX.................
	.....................XXXXXX.....X...XXXXXXXXXXX....................
	................................X..................................
	......XXXXXXXXXXXXX.............X..................................
	..................X.............XXXXXXXXX..........................
	..................X.........XXXXXXXXXXXX...........................
	..................X................................................
	XX.............................................................XXXX
	XX..................XXXXXXXXXXXXX.................................X
	...................................................................
	.................................................................X.
	.....................XXXXX.......................................XX

	(login@host)./count_island toto
	.................00000000..........................................
	....................000000000.......11111111.......................
	.................00000000..............111...11111.................
	.....................000000.....2...11111111111....................
	................................2..................................
	......3333333333333.............2..................................
	..................3.............222222222..........................
	..................3.........222222222222...........................
	..................3................................................
	44.............................................................5555
	44..................6666666666666.................................5
	...................................................................
	.................................................................7.
	.....................88888.......................................77
	(login@host)

	Exemple 2:
	Voici le contenu du fichier "flop_aime".

	...................................................................
	...X........X.....XXXXX......XXXXXXX...XXXXXXXXXX..XXXXXXXXXX......
	...XX......XX....XX...XX....XX.....XX.....XXXX.....XXXXXXXXXX......
	...XXXX..XXXX...XX.....XX...XX.....XX......XX......XX..............
	...XX.XXXX.XX...XX.....XX...XX.....XX......XX......XX..............
	...XX...X..XX...XX.....XX...XXXXXXXX.......XX......XXXXX...........
	...XX......XX...XXXXXXXXX...XXXX...........XX......XXXXX...........
	...XX......XX..XX.......XX..XX.XX..........XX......XX..............
	...XX......XX..XX.......XX..XX...X.........XX......XX..............
	...XX......XX..XX.......XX..XX....X......XXXXXX....XXXXXXXXXX......
	...XX......XX.XX.........XX.XX.....XX..XXXXXXXXXX..XXXXXXXXXX..X...
	...................................................................

	(login@host)./count_island flop_aime
	...................................................................
	...0........0.....11111......2222222...3333333333..4444444444......
	...00......00....11...11....22.....22.....3333.....4444444444......
	...0000..0000...11.....11...22.....22......33......44..............
	...00.0000.00...11.....11...22.....22......33......44..............
	...00...0..00...11.....11...22222222.......33......44444...........
	...00......00...111111111...2222...........33......44444...........
	...00......00..11.......11..22.22..........33......44..............
	...00......00..11.......11..22...5.........33......44..............
	...00......00..11.......11..22....6......333333....4444444444......
	...00......00.11.........11.22.....77..3333333333..4444444444..8...
	...................................................................
	(login@host)

	Exemple 3:
	Voici le contenu du fichier "titi"

	..X.......
	...X.X....
	....XX.XX.
	.X..XX....
	.X..X...X.

	(login@host)./count_island titi | cat -e
	..0.......$
	...1.2....$
	....22.33.$
	.4..22....$
	.4..2...5.$
	(login@host)

	Exemple 4:
	(login@host)./count_island | cat -e
	$
	(login@host)
