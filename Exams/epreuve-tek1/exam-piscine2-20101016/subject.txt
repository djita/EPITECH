Details administratifs:

- Aucune forme de communication n'est permise.

	- Vous devez avoir votre carte d'etudiant. Vous devez la poser face visible
	  sur votre table

	- Ceci est un examen, il est interdit de discuter, ecouter de la musique,
	  faire du bruit, ou de produire toute autres nuisances pouvant deranger les
	  autres etudiants ou perturber le bon deroulement de l'examen

	- Vos telephones portables doivent etre eteints.
	
	- Il faudra utiliser le sous-repertoire "rendu" a la racine du compte,
	  il contiendra les repertoires aux noms demandes pour chaque
	  exercice.

	- Chaque exercice doit etre realise dans le repertoire correspondant au 
	  nom indique dans l'en-tete de chaque exercice.

	- Le repertoire "rendu", doit contenir un fichier nomme "auteur"
	  comprenant :
		le login (ex: jog) suivi d'un '\n'.
	  ce qui doit donner:

	  jog@neutron> cat -e ~/rendu/auteur
	  jog$

	- C'est un programme qui s'occupe du ramassage, respectez les noms,
	  les chemins, les fichiers et les repertoires ...

	- LES DROITS DE VOS FICHIERS N'ONT AUCUNE IMPORTANCE, VOUS N'AVEZ DONC
	  PAS BESOIN DE LES CHANGER (SAUF SI ON VOUS LE DEMANDE DANS LE SUJET).
	
	- En cas de probleme technique avec le sujet, on ne doit s'adresser qu'au
	  surveillant uniquement.

	- Tout materiel non explicitement autorise est strictement interdit.

	- LES EXERCICES DOIVENT ETRE REALISES DANS L'ORDRE, la correction 
	  de l'examen s'arretera des qu'un exercice sera considere comme faux.

	- Toute sortie est definitive.


Le Code :

	- Des fonctions utiles sont parfois donnees dans le repertoire
	  ~/sujet/misc

	- Le releve du code est automatise, un programme testera le bon
	  fonctionnement des exercices.

	- Les fonctions autorisees sont indiquees dans l'en-tete de chaque 
	  exercice. Vous pouvez recoder toutes les fonctions a votre guise.

	- Toute fonction non autorisee explicitement est interdite.

	- Vous avez le droit a des feuilles blanches et un stylo.

	- Les exercices dit "subsidiaires" sont des exercices qui donnent des
	  points si vous avez fait les exercices qui les precedent.

	- Les exercices dit "bonus" sont des exercices qui donnent des points 
	  supplementaires meme si vous ne faites pas les exercices qui les 
	  precedent.

	- Pour toute question apres l'examen, creez un ticket sur l'intra-bocal
	  (http://intra-bocal.epitech.net), ou envoyez un mail a
	  contact@staff.epita.fr


 ----------******------------*****------------******------------*****----------

Exercice 1 : aff_z
_______________________
Nom de l'executable     :       aff_z
Nom du repertoire       :       ex_1
temps de realisation    :       30 minutes.
Fonction autorisee      :       my_putchar

        Ecrire un programme qui prend en parametre une chaine de caracteres
        et qui affiche sur la sortie standard le premier caractere 'z'
        rencontre suivi de '\n'. Si aucun 'z' n'est rencontre dans la chaine,
        le programme affiche 'z' suivi '\n'. Si il n'y a pas de parametre
        alors le programme affiche 'z' suivie '\n'.


exemple 1:
(jog@almarita)./aff_z "abc"
z
(jog@almarita)

exemple 2:
(jog@almarita) ./aff_z "  Chiche A POal " | cat -e
z$
(jog@almarita)

exemple 3:
(jog@almarita) ./aff_z " AkjhZ zLKIJz , 23y"
z
(jog@almarita)

exemple 4:
(jog@almarita) ./aff_z | cat -e
z$
(jog@almarita)




Exercice 2  : paramsum
________________________
Nom du fichier          :       paramsum
Nom de repertoire       :       ex_2
Temps de realisation    :       5 minutes.
Fonction autorisee      :       printf
Compilation		:	cc -o paramsum paramsum.c


        Ecrire un programme qui affiche le nombre d'argument passes en parametre
        au programme, suivi d'un '\n'.
        Si aucun argument n'est passe, vous afficherez '0', suivis d' un '\n'.


exemple 1:
(jog@almarita)./paramsum 1 2 3 5 7 24
6
(jog@almarita)

exemple 2:
(jog@almarita)./paramsum 6 12 24 | cat -e
3$
(jog@almarita)

exemple 3:
(jog@almarita)./paramsum | cat -e
0$
(jog@almarita)




Exercice 3  : rotone
________________________
Nom de l'executable     :       rotone
Nom du repertoire       :       ex_3
Temps de realisation    :       15 minutes
Language		:	C
Fonction autorisee      :       my_putchar, my_putnbr, my_putstr, write


         Ecrire un programme qui prend en parametre une chaine de caracteres
         et qui affiche cette chaine en remplacant chaque caractere
         alphabetique par le caractere suivant dans l'ordre alphabetique.

	 
	 
	 'z' devient 'a' et 'Z' devient 'A'.

         Les majuscules restent des majuscules et les minuscules restent des
         minuscules.

         L'affichage se termine toujours par un '\n'.

         Si aucun parametre n'est transmis, le programme affiche '\n'.



exemple 1:
> ./rotone "abc"
bcd
>

exemple 2:
> ./rotone "Eliminez le bingalow 505" | cat -e
Fmjnjofa mf cjohbmpx 505$
>

exemple 3:
> ./rotone " AkjhZ zLKIJz , 23y " | cat -e
 BlkiA aMLJKa , 23z $
>

exemple 3:
> ./rotone | cat -e
$
>




Exercice 4 : hidenp
__________________________

Nom de l'executable  :          hidenp
Nom du repertoire    :          ex_4
temps de realisation :          15 minutes
Fonctions autorisees :          write


        Ecrire un programme qui prend en parametres deux chaines de
        caracteres et qui affiche:
	1 suivi de '\n',
	si la chaine du premier parametre est cachee dans la deuxieme chaine.
	Sinon il affichera:
	0 suivi de '\n'.
	Soit s1 et s2 des chaine de caracteres.
        On dit que la chaine s1 est cachee dans la chaine s2 si on peut
        trouver chaque caractere de s1 dans s2 et ce dans le meme ordre que
        dans s1.

        Ainsi:
		"fgex.;" est cachee dans "tyf34gdgf;'ektufjhgdgex.;.;rtjynur6"
		"abc" est cachee dans "2altrb53c.sse"
		"abc"  n'est pas cachee dans "btarc"

	Si il n'y a pas deux parametres, le programme affiche '\n'.


exemple 1:
(jog@almarita)./hidenp padinton "paqefwtdjetyiytjneytjoeyjnejeyj" | cat -e
1$
(jog@almarita)


exemple 2:
(jog@almarita)./hidenp ddf6vewg64f gtwthgdwthdwfteewhrtag6h4ffdhsd | cat -e
0$
(jog@almarita)


exemple 3:
(jog@almarita)./hidenp "rien" "cette phrase ne cache rien" | cat -e
1$
(jog@almarita)


exemple 4:
(jog@almarita)./hidenp | cat -e
$
(jog@almarita)

