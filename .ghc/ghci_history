ls
removeNoUppercase :: [Char] -> [Char]
removeNoNUppercase :: [Char] -> [Char]
removeNonUppercase st = [ c | c <- st, c `elem` ['A'..'Z']]
removeNonUppercase st = [ c | c <- st, c `elem` ['A'..'Z']]
2 ^ 63
2 ^ 64
minBound :: Int
maxBound :: Int
:info Int
[LT .. ]
[LT .. GT]
[LT .. GT]
[LT,..]
[LT..]
[LT..GT]
minBound :: Int
maxBound :: Integer
maxBound :: Int
maxBound :: Int == maxBound :: Integer
maxBound Int == maxBound Integer
Int
Int == Integer
ls
EQ
GT
LT
[1,2,3,4] ++ [3]
read "[1,2,3,4]" ++ [3]
read "[1,2,3,4]" + [3]
[1,2,3,4] + [3]
read "[1,2,3,4]" ++ 3
[1,2,3,4] ++ 3
[1,2,3,4] + 3
ll
"HASKELL IS CHEATING!"
HASKELL IS CHEATING!
HASKELL IS CHEATING! :D
[' '..'~']
['0'..'z']
'\n'
"hello" ++ " world!"
"hello" ++ " world!"
"hello" ++ " world!\n"
pi
pi
pi
pi
pi
pi
pi
succ pi
pi
succ PI
succ 3
5 * (-3)
5 * -3
ls
ls
:set prompt "ghci> "
2 ** (1/2)
2 ^ (1/2)
'''
'' ^ ''
'' + ''
'' + []
'' + 1
"" + 1
2 + 15
:l myfunctions
:q
:q
quit
exit
ls
ls
a
:t a
let a = 45678648678458453418564548648
